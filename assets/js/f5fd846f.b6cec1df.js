"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4562],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return f}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(t),f=i,m=d["".concat(p,".").concat(f)]||d[f]||u[f]||a;return t?r.createElement(m,o(o({ref:n},c),{},{components:t})):r.createElement(m,o({ref:n},c))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8805:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return c},default:function(){return d}});var r=t(3117),i=t(102),a=(t(7294),t(3905)),o=["components"],l={id:"conditional_fields",title:"Conditional fields from properties",sidebar_label:"Conditional fields"},p=void 0,s={unversionedId:"entities/conditional_fields",id:"entities/conditional_fields",title:"Conditional fields from properties",description:"When defining the properties of a schema, you can choose to use a builder",source:"@site/docs/entities/conditional_fields.md",sourceDirName:"entities",slug:"/entities/conditional_fields",permalink:"/docs/entities/conditional_fields",tags:[],version:"current",frontMatter:{id:"conditional_fields",title:"Conditional fields from properties",sidebar_label:"Conditional fields"},sidebar:"docsSidebar",previous:{title:"Geopoint",permalink:"/docs/entities/properties/geopoint"},next:{title:"Custom fields",permalink:"/docs/entities/custom_fields"}},c=[{value:"Example 1",id:"example-1",children:[],level:3},{value:"Example 2:",id:"example-2",children:[],level:3}],u={toc:c};function d(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"When defining the properties of a schema, you can choose to use a builder\n",(0,a.kt)("a",{parentName:"p",href:"../api/types/propertybuilder"},(0,a.kt)("inlineCode",{parentName:"a"},"PropertyBuilder")),", instead of assigning the\nproperty configuration directly. In the builder you\nreceive ",(0,a.kt)("a",{parentName:"p",href:"../api/types/propertybuilderprops"},(0,a.kt)("inlineCode",{parentName:"a"},"PropertyBuilderProps")),"\nand return your property."),(0,a.kt)("p",null,"This is useful for changing property configurations like available values on the\nfly, based on other values."),(0,a.kt)("h3",{id:"example-1"},"Example 1"),(0,a.kt)("p",null,"Example of field that gets enabled or disabled based on other values:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import { buildSchema, EntityReference, EntitySchema } from "dist/index";\n\ntype Product = {\n    name: string;\n    main_image: string;\n    available: boolean;\n    price: number;\n    related_products: EntityReference[];\n    publisher: {\n        name: string;\n        external_id: string;\n    }\n}\n\nexport const productSchema: EntitySchema = buildSchema<Partial<Product>>({\n    name: "Product",\n    properties: {\n        available: {\n            dataType: "boolean",\n            title: "Available"\n        },\n        price: ({ values }) => ({\n            dataType: "number",\n            title: "Price",\n            validation: {\n                requiredMessage: "You must set a price between 0 and 1000",\n                min: 0,\n                max: 1000\n            },\n            disabled: !values.available && {\n                clearOnDisabled: true,\n                disabledMessage: "You can only set the price on available items"\n            },\n            description: "Price with range validation"\n        })\n    }\n});\n')),(0,a.kt)("h3",{id:"example-2"},"Example 2:"),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"User")," type that has a ",(0,a.kt)("inlineCode",{parentName:"p"},"source")," field that can be of type ",(0,a.kt)("inlineCode",{parentName:"p"},"facebook"),"\nor ",(0,a.kt)("inlineCode",{parentName:"p"},"apple"),", and its fields change accordingly"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import {\n    buildSchema,\n    EntitySchema,\n    buildProperty,\n    buildProperties\n} from "@camberi/firecms";\n\ntype User = {\n    source: {\n        type: "facebook",\n        facebookId: string\n    } | {\n        type: "apple",\n        appleId: number\n    }\n}\n\nexport const userSchema: EntitySchema = buildSchema<User>({\n    name: "User",\n    properties: {\n        source: ({ values }) => {\n            const properties = buildProperties<any>({\n                type: {\n                    dataType: "string",\n                    config: {\n                        enumValues: {\n                            "facebook": "FacebookId",\n                            "apple": "Apple"\n                        }\n                    }\n                }\n            });\n\n            if (values.source) {\n                if ((values.source as any).type === "facebook") {\n                    properties["facebookId"] = buildProperty({\n                        dataType: "string"\n                    });\n                } else if ((values.source as any).type === "apple") {\n                    properties["appleId"] = buildProperty({\n                        dataType: "number"\n                    });\n                }\n            }\n\n            return ({\n                dataType: "map",\n                title: "Source",\n                properties: properties\n            });\n        }\n    }\n});\n\n')))}d.isMDXComponent=!0}}]);