"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9244],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return u}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=s(n),u=i,h=d["".concat(p,".").concat(u)]||d[u]||c[u]||r;return n?a.createElement(h,l(l({ref:t},m),{},{components:n})):a.createElement(h,l({ref:t},m))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8398:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return m},default:function(){return d}});var a=n(3117),i=n(102),r=(n(7294),n(3905)),l=["components"],o={id:"migrating_from_alpha_versions",title:"Migrating from alpha versions",sidebar_label:"Migrating from alpha versions"},p=void 0,s={unversionedId:"migrating_from_alpha_versions",id:"migrating_from_alpha_versions",title:"Migrating from alpha versions",description:"If you were using the app in the alpha versions (before 1.0.0-beta1), you will",source:"@site/docs/migrating_from_alpha_versions.md",sourceDirName:".",slug:"/migrating_from_alpha_versions",permalink:"/docs/migrating_from_alpha_versions",tags:[],version:"current",frontMatter:{id:"migrating_from_alpha_versions",title:"Migrating from alpha versions",sidebar_label:"Migrating from alpha versions"},sidebar:"docsSidebar",previous:{title:"Custom CMSApp",permalink:"/docs/custom_cms_app"},next:{title:"Changelog",permalink:"/docs/changelog"}},m=[{value:"Core dependencies update",id:"core-dependencies-update",children:[],level:2},{value:"Separation of concerns",id:"separation-of-concerns",children:[],level:2},{value:"API changes",id:"api-changes",children:[],level:2},{value:"Text search",id:"text-search",children:[],level:2},{value:"Saving and deleting callbacks",id:"saving-and-deleting-callbacks",children:[],level:2}],c={toc:m};function d(e){var t=e.components,n=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"If you were using the app in the alpha versions (before 1.0.0-beta1), you will\nfind many ",(0,r.kt)("strong",{parentName:"p"},"breaking changes"),". We have done a lot of internal refactorings with\nthe primary goal of making internal and external APIs more predictable and\nconsistent."),(0,r.kt)("p",null,"Oh, and we have a very awesome new dark theme too ;)"),(0,r.kt)("h2",{id:"core-dependencies-update"},"Core dependencies update"),(0,r.kt)("p",null,"In version 1.0.0 there are major updates to some dependencies, now using:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"MaterialUI v5"),(0,r.kt)("li",{parentName:"ul"},"React Router v6"),(0,r.kt)("li",{parentName:"ul"},"Firebase JS SDK 9")),(0,r.kt)("p",null,"Run this command to add the new dependencies:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"yarn add @camberi/firecms firebase@^9.0.0 @mui/material@^5.1.0 @mui/icons-material@^5.1.0 @mui/lab@^5.0.0-alpha.55 @mui/styles@^5.1.0 @emotion/react @emotion/styled react-router@^6.0.0 react-router-dom@^6.0.0\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"You may want to remove previous dependencies to @material-ui")),(0,r.kt)("h2",{id:"separation-of-concerns"},"Separation of concerns"),(0,r.kt)("p",null,"We are taking steps to abstract away all the Firebase specific details behind\nour own interfaces, giving developers more flexibility, even allowing to replace\nthe Firestore datasource, the Firebase Storage implementation or the Firebase\nauth mechanism."),(0,r.kt)("p",null,"All the code related to Firebase/Firestore is now located in an internal package\ncalled ",(0,r.kt)("inlineCode",{parentName:"p"},"firebase_app")," and it is the only place where there are references to\nFirebase code. Essentially, you can build a CMS replacing all the services\nwithout touching that specific package."),(0,r.kt)("p",null,"If you are using ",(0,r.kt)("inlineCode",{parentName:"p"},"CMSApp")," (called\n",(0,r.kt)("inlineCode",{parentName:"p"},"FirebaseCMSApp")," from now on), you will not be largely impacted by the changes\nin this update, besides the callbacks and props specified bellow."),(0,r.kt)("p",null,"There are two new classes that replace the Firebase ones:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"EntityReference")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GeoPoint")," (though the field is not implemented)")),(0,r.kt)("p",null,"If you have any models that use Firebase references such as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import firebase from "firebase/app";\n\ntype User = {\n    // ...\n    liked_products: firebase.firestore.DocumentReference[];\n}\n')),(0,r.kt)("p",null,"you should replace them by:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { EntityReference } from "@camberi/firecms";\n\ntype User = {\n    // ...\n    liked_products: EntityReference[];\n}\n')),(0,r.kt)("h2",{id:"api-changes"},"API changes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"CMSApp")," has been renamed to ",(0,r.kt)("inlineCode",{parentName:"strong"},"FirebaseCMSApp"))," in order to better reflect\nthat that implementation of ",(0,r.kt)("inlineCode",{parentName:"p"},"FireCMS")," uses Firebase as the backend.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"CMSAppProvider")," has been renamed to ",(0,r.kt)("inlineCode",{parentName:"p"},"FireCMS"),", it is now the main component\nof the CMS, in charge of initialising navigation and all the contexts.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"CMSAppContext")," has been renamed to ",(0,r.kt)("inlineCode",{parentName:"p"},"FireCMSContext"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"useCMSAppContext")," has been renamed to ",(0,r.kt)("inlineCode",{parentName:"p"},"useFireCMSContext"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"General callbacks refactor. ",(0,r.kt)("strong",{parentName:"p"},"All callbacks")," now always return a single\nobject with the props as fields. The goal of this change is to make them\npredictable and remove inconsistencies:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Every field that was previously called ",(0,r.kt)("inlineCode",{parentName:"li"},"collectionPath")," now is simply\ncalled ",(0,r.kt)("inlineCode",{parentName:"li"},"path"),"."),(0,r.kt)("li",{parentName:"ul"},"Every field that was previously called ",(0,r.kt)("inlineCode",{parentName:"li"},"entitySchema")," now is simply\ncalled ",(0,r.kt)("inlineCode",{parentName:"li"},"schema"),"."),(0,r.kt)("li",{parentName:"ul"},"All entity id fields are now renamed to ",(0,r.kt)("inlineCode",{parentName:"li"},"entityId")," (with the only\nexception of the field ",(0,r.kt)("inlineCode",{parentName:"li"},"id")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"Entity"),")."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"AuthController")," ",(0,r.kt)("inlineCode",{parentName:"p"},"loggedUser")," renamed to ",(0,r.kt)("inlineCode",{parentName:"p"},"user"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"EntitySaveProps")," renamed to ",(0,r.kt)("inlineCode",{parentName:"p"},"EntityOnSaveProps"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"EntityDeleteProps")," renamed to ",(0,r.kt)("inlineCode",{parentName:"p"},"EntityOnDeleteProps"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"UploadedFileContext")," ",(0,r.kt)("inlineCode",{parentName:"p"},"entityValues")," renamed to ",(0,r.kt)("inlineCode",{parentName:"p"},"values"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"useNavigationFrom")," renamed to ",(0,r.kt)("inlineCode",{parentName:"p"},"useResolvedNavigationFrom"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"getNavigationFrom")," renamed to ",(0,r.kt)("inlineCode",{parentName:"p"},"resolveNavigationFrom"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"AdditionalColumnDelegate")," ",(0,r.kt)("inlineCode",{parentName:"p"},"builder")," prop now receives an object including the\nentity and the app context, instead of only the entity as before:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'// Previous\nconst previousProductAdditionalColumn: AdditionalColumnDelegate<Product> = {\n    id: "spanish_title",\n    title: "Spanish title",\n    builder: (entity: Entity<Product>) =>\n        <div>{entity.values.title}</div>\n};\n\n// Now\nconst productAdditionalColumn: AdditionalColumnDelegate<Product> = {\n    id: "spanish_title",\n    title: "Spanish title",\n    builder: ({ entity }) =>\n        <div>{entity.values.title}</div>\n};\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Authenticator")," now receives an object with a ",(0,r.kt)("inlineCode",{parentName:"li"},"user")," field instead of a ",(0,r.kt)("inlineCode",{parentName:"li"},"User"),"\n. It is also generically typed now, so you can specify the type for the user.\nIf you are using the default ",(0,r.kt)("inlineCode",{parentName:"li"},"FirebaseCMSApp"),", you can specify your\nauthenticator like:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { User as FirebaseUser } from "firebase/auth";\nconst myAuthenticator: Authenticator<FirebaseUser> = async ({\n                                                                user,\n                                                                authController\n                                                            }) => {\n    console.log("Allowing access to", user?.email);\n    // ...\n    return true;\n};\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"FormContext")," ",(0,r.kt)("inlineCode",{parentName:"p"},"entitySchema")," is now called ",(0,r.kt)("inlineCode",{parentName:"p"},"schema"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"field")," prop in properties has been renamed to ",(0,r.kt)("inlineCode",{parentName:"p"},"Field"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"preview")," prop in properties has been renamed to ",(0,r.kt)("inlineCode",{parentName:"p"},"Preview"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"indexes")," prop in ",(0,r.kt)("inlineCode",{parentName:"p"},"EntityCollection")," has been renamed to ",(0,r.kt)("inlineCode",{parentName:"p"},"filterCombinations"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"relativePath")," prop in ",(0,r.kt)("inlineCode",{parentName:"p"},"EntityCollection")," has been renamed to ",(0,r.kt)("inlineCode",{parentName:"p"},"path"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If you were using ",(0,r.kt)("inlineCode",{parentName:"p"},"CMSAppProvider")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"CMSMainView"),", they have been largely\nrefactored, and now you will need to implement a bunch of extra stuff if you\nwant to go down the super custom road. Those components have now been turned\ninto:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"api/functions/firecms"},(0,r.kt)("inlineCode",{parentName:"a"},"FireCMS"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"api/functions/scaffold"},(0,r.kt)("inlineCode",{parentName:"a"},"Scaffold"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"api/functions/navigationroutes"},(0,r.kt)("inlineCode",{parentName:"a"},"NavigationRoutes"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"api/functions/sideentitydialogs"},(0,r.kt)("inlineCode",{parentName:"a"},"SideEntityDialogs")))),(0,r.kt)("p",{parentName:"li"},"You will be responsible for initialising the material theme, Firebase (or your\nown backend) and providing the Router. On the plus side, this is going to give\nyou a ton of room for customisation. You can check a complete example in:\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Camberi/firecms/blob/master/example/src/CustomCMSApp.tsx"},"https://github.com/Camberi/firecms/blob/master/example/src/CustomCMSApp.tsx")))),(0,r.kt)("h2",{id:"text-search"},"Text search"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"text search")," functionality has been moved to the datasource and removed\nfrom the collection level. In your collection, you can now set\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"textSearchEnabled")," flag to true to display the search bar."),(0,r.kt)("p",null,"This goes in the direction of building a generic core of the CMS that is not\ndirectly coupled with Firebase/Firestore. We have removed search delegates at\nthe collection level, and now you can find them at the datasource level."),(0,r.kt)("p",null,"The interface created for the Datasource is now agnostic, and we understand that\nthe text search is part of the API in ",(0,r.kt)("inlineCode",{parentName:"p"},"listenCollection")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"fetchCollection"),",\ninstead of being a separate delegate, like until now."),(0,r.kt)("p",null,"The text search implementation has been moved to the ",(0,r.kt)("inlineCode",{parentName:"p"},"firebase_app")," level. You\ncan now define a ",(0,r.kt)("inlineCode",{parentName:"p"},"FirestoreTextSearchController")," where you need to return the\nsearch ids, based on the collection ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," and the ",(0,r.kt)("inlineCode",{parentName:"p"},"searchString"),", instead of\nhaving a single TextSearchDelegate per collection."),(0,r.kt)("p",null,"Check an example of the ",(0,r.kt)("a",{parentName:"p",href:"./firebase_cms_app#text-search"},"new implementation")),(0,r.kt)("h2",{id:"saving-and-deleting-callbacks"},"Saving and deleting callbacks"),(0,r.kt)("p",null,"The callbacks that were previously related to a schema have been moved to the\ncollection level, and are now bundled up under the optional ",(0,r.kt)("inlineCode",{parentName:"p"},"callbacks")," prop."))}d.isMDXComponent=!0}}]);