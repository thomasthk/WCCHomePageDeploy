"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6271],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var o=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=o.createContext({}),p=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=p(e.components);return o.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),d=i,v=m["".concat(s,".").concat(d)]||m[d]||u[d]||r;return t?o.createElement(v,a(a({ref:n},c),{},{components:t})):o.createElement(v,a({ref:n},c))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,a=new Array(r);a[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var p=2;p<r;p++)a[p]=t[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9242:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var o=t(3117),i=t(102),r=(t(7294),t(3905)),a=["components"],l={id:"custom_top_level_views",title:"Custom top level views",sidebar_label:"Custom top level views"},s=void 0,p={unversionedId:"custom_top_level_views",id:"custom_top_level_views",title:"Custom top level views",description:"If you need to develop a custom view that does not map directly to a Firestore",source:"@site/docs/custom_top_level_views.md",sourceDirName:".",slug:"/custom_top_level_views",permalink:"/docs/custom_top_level_views",tags:[],version:"current",frontMatter:{id:"custom_top_level_views",title:"Custom top level views",sidebar_label:"Custom top level views"},sidebar:"docsSidebar",previous:{title:"Navigation",permalink:"/docs/navigation"},next:{title:"useAuthController",permalink:"/docs/hooks/use_auth_controller"}},c=[{value:"Example:",id:"example",children:[],level:3}],u={toc:c};function m(e){var n=e.components,t=(0,i.Z)(e,a);return(0,r.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"If you need to develop a custom view that does not map directly to a Firestore\ncollection you can implement it as a React component."),(0,r.kt)("p",null,"You need to define the name, route and the component, and add it to the main\nnavigation, as the example below."),(0,r.kt)("p",null,"By default, it will show in the main navigation view."),(0,r.kt)("p",null,"For custom views you can define the following props:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"path")," string | string[]"),(0,r.kt)("p",{parentName:"li"},"CMS Path (or paths) you can reach this view from.\nIf you include multiple paths, only the first one will be included in the\nmain menu")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"name"),": string"),(0,r.kt)("p",{parentName:"li"},"Name of this view")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"description"),"?: string"),(0,r.kt)("p",{parentName:"li"},"Optional description of this view. You can use Markdown")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"hideFromNavigation"),"?: boolean"),(0,r.kt)("p",{parentName:"li"},"Should this view be hidden from the main navigation panel.\nIt will still be accessible if you reach the specified path")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"view"),": React.ReactNode"),(0,r.kt)("p",{parentName:"li"},"Component to be rendered. This can be any React component, and can use any\nof the provided hooks")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"group"),"?: string"),(0,r.kt)("p",{parentName:"li"},"Optional field used to group top level navigation entries under a\nnavigation view."))),(0,r.kt)("h3",{id:"example"},"Example:"),(0,r.kt)("p",null,"A quick example for a custom view:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import {\n    buildSchema,\n    CMSView,\n    NavigationBuilder,\n    NavigationBuilderProps,\n    buildCollection,\n    FirebaseCMSApp\n} from "@camberi/firecms"\n\nexport default function App() {\n\n    const productSchema = buildSchema({\n        name: "Product",\n        properties: {\n            name: {\n                title: "Name",\n                validation: { required: true },\n                dataType: "string"\n            }\n        }\n    });\n\n    const customViews: CMSView[] = [{\n        path: ["additional", "additional/:id"],\n        name: "Additional view",\n        description: "This is an example of an additional view that is defined by the user",\n        // This can be any React component\n        view: <ExampleCMSView/>\n    }];\n\n    const navigation: NavigationBuilder = ({ user }: NavigationBuilderProps) => ({\n        collections: [\n            buildCollection({\n                path: "products",\n                schema: productSchema,\n                name: "Products"\n            })\n        ],\n        views: customViews\n    });\n\n    return <FirebaseCMSApp\n        name={"My Online Shop"}\n        navigation={navigation}\n        firebaseConfig={firebaseConfig}\n    />;\n}\n')),(0,r.kt)("p",null,"Your custom view is implemented as any regular React component that uses\nsome hooks provided by the CMS:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import React from "react";\nimport { Box, Button } from "@mui/material";\n\nimport {\n    buildSchema,\n    useAuthController,\n    useSideEntityController,\n    useSnackbarController\n} from "@camberi/firecms";\n\n/**\n * Sample CMS view not bound to a collection, customizable by the developer\n * @constructor\n */\nexport function ExampleCMSView() {\n\n    // hook to display custom snackbars\n    const snackbarController = useSnackbarController();\n\n    // hook to open the side dialog that shows the entity forms\n    const sideEntityController = useSideEntityController();\n\n    // hook to do operations related to authentication\n    const authController = useAuthContext();\n\n    const customProductSchema = buildSchema({\n        name: "Custom product",\n        properties: {\n            name: {\n                title: "Name",\n                validation: { required: true },\n                dataType: "string"\n            },\n            very_custom_field: {\n                title: "Very custom field",\n                dataType: "string"\n            }\n        }\n    });\n\n    return (\n        <Box\n            display="flex"\n            width={"100%"}\n            height={"100%"}>\n\n            <Box m="auto"\n                 display="flex"\n                 flexDirection={"column"}\n                 alignItems={"center"}\n                 justifyItems={"center"}>\n\n                <div>This is an example of an additional view</div>\n\n                {authController.user ?\n                    <div>Logged in\n                        as {authController.user.displayName}</div>\n                    :\n                    <div>You are not logged in</div>}\n\n                <Button\n                    onClick={() => snackbarController.open({\n                        type: "success",\n                        message: "This is pretty cool"\n                    })}\n                    color="primary">\n                    Test snackbar\n                </Button>\n\n                <Button\n                    onClick={() => sideEntityController.open({\n                        entityId: "B003WT1622",\n                        path: "/products-test",\n                        schema: customProductSchema\n                    })}\n                    color="primary">\n                    Open entity with custom schema\n                </Button>\n\n            </Box>\n        </Box>\n    );\n}\n')))}m.isMDXComponent=!0}}]);